# @format

# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
# Inspired by https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-on-ubuntu
stages:
  # - install
  # - lint
  # - format
  - build
  - publish
  - deploy

default:
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - public/
    policy: pull-push
  image: node:latest

# install:
#   stage: install
#   script:
#     - npm install --also=dev
#     - npm install --save next
#     - npm install --save-dev typescript @types/react @types/node prettier
# build:
#   stage: build
#   script:
#     - npm run build

# lint:
#   stage: lint
#   script:
#     - npm run lint

# format:
#   stage: format
#   script:
#     - npm run format

variables:
  TAG_LATEST: $CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - TAG_COMMIT=$(echo $TAG_COMMIT | tr '[:upper:]' '[:lower:]')
    - TAG_LATEST=$(echo $TAG_LATEST | tr '[:upper:]' '[:lower:]')
    - docker-compose-build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose-push $TAG_COMMIT
    - docker-compose-push $TAG_LATEST

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  before_script:
    - apk add --update --no-cache git
  script:
    - chmod 600 $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $deployer@129.241.153.29 "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $deployer@129.241.153.29 "docker-compose-pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $deployer@129.241.153.29 "docker-compose up praksisplasslista"
  environment:
    name: production
    url: http://129.241.153.29
